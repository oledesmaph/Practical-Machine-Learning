if (!file.exists('household_power_consumption.txt')) {
download.file('https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip', destfile='raw-power-data.zip')
unzip('raw-power-data.zip')
}
# Load data
myData <- read.table("household_power_consumption.txt",header=TRUE,sep=";",colClasses="character")
# Convert to Date/Time clsases
myData[,1] <- as.Date(myData$Date,"%d/%m/%Y")
myData[,2] <- as.Date(myData$Time,"%H/%M/%S")
# Create a subset of the data between 2007-02-01 and 2007-02-02
subData <- subset(myData, myData$Date %in% as.Date(c("2007-02-01","2007-02-02")))
# Cast the rest of the columns as numeric
subData[,3] <- as.numeric(subData[,3])
subData[,4] <- as.numeric(subData[,4])
subData[,5] <- as.numeric(subData[,5])
subData[,6] <- as.numeric(subData[,6])
subData[,7] <- as.numeric(subData[,7])
subData[,8] <- as.numeric(subData[,8])
subData[,9] <- as.numeric(subData[,9])
# Create Plot 1
hist(subData[,3], col = "Red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
# Copy to PNG file for submission
dev.copy(png,file="plot1.png")
# Close device
dev.off()
#Importing plyr package
library(plyr)
#Get the graphic device as png
png(filename = 'plot1.png', width = 480, height = 480, units = 'px')
#Read the data
NEI <- readRDS("summarySCC_PM25.rds")
#Split the data based on each year and add the total emissions
graphdata <- ddply(NEI,"year",function(x){totalemissions <- sum(x$Emissions) data.frame(totalemissions = totalemissions)})
#Plot Total Emissions vs year
with(graphdata,plot(year,totalemissions,xlab="year",ylab="Total Emissions",main="Total Emissions of PM2.5 for each year",type="l",lwd=2))
#Close the graphic device
dev.off()
#Importing plyr package
library(plyr)
#Get the graphic device as png
png(filename = 'plot2.png', width = 480, height = 480, units = 'px')
#Read the data
NEI <- readRDS("summarySCC_PM25.rds")
#Split the data based on each year and each city
graphdata <- ddply(NEI,.(year,fips),function(x){totalemissions <- sum(x$Emissions)
data.frame(totalemissions = totalemissions)})
#extract data for Baltimore City
baltimoredata <- graphdata[graphdata$fips == "24510",]
#Plot Total Emissions vs year
with(baltimoredata,plot(year,totalemissions,xlab="year",ylab="Total Emissions",main="Total Emissions of PM2.5 for each year For Baltimore City",type="l",lwd=2))
#Close the graphic device
dev.off()
setwd("C:/Users/Oliver/Coursera/RepData1/RepData_PeerAssessment1")
install packages("markdown")
install.packages("markdown")
library(markdown)
rpubsUpload(title, htmlFile, id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
rpubsUpload("Effects of Different Weather Events on Economy and Health in the U.S.", "repdata-data-StormData.html", id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
library(swirl)
swrl()
swirl()
yes
y
swirl()
10
25
nxt()
4
summary(cars$price)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp,x)
mean(temp)
install.packages("psych")
library(psych)
library(ggplot2
)
library(gridExtra)
library(datasets)
data(ToothGrowth)
attach(ToothGrowth)
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col = )
abline(regrline, lwd=3, col = 'red')
summary(regline)
summary(regrlin)
summary(regrline)
swirl()
library(swirl)
swirl()
cor
cor(gpa_nor,gch_nor)
lm
l_nor <- lm(gch_nor ~ gpa_nor)
child
lm
fit <- lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2) / (n - 2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
sRes <- deviance(fit)
1-sRes/sTot
1-sRes/sTot
summary(fit)$r.squared
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
ones
| <- rep(1, nrow(galton))
rep(1, nrow(
11)
)
a <- rep(1, nrow(galton))
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent -1, galton)
lim(child ~ 1, galton)
lm(child ~ 1, galton)
view(tres)
view(trees)
head(trees)
fit <- lm(volume ~ Girth + Height + Constant -1, trees)
fit <- lm(volume ~ Girth + Height + Constant -1, trees)
fit <- lm
swirl()
lm(child ~ 1, galton)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees), or fit <- lm(Volume ~ . -1, trees)
fit <- lm(Volume ~ . -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(VOlume ~ Height + Constant -1, trees2)
fit2 <-  lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm
all <- lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
makelms()
ec <- swiss$Examination+swiss$Catholic
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients-efit$coefficients
lm
all <- lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
makelms()
ec <- swiss$Examination+swiss$Catholic
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients-efit$coefficients
6
dim
dim(InsectSprays)
dim(InsectSprays)
head(InsectSprays,15)
head(InsectSprays,15)
SB
sB
SB
sB
summary(InsectSprays[,2])
summary(InsectSprays[,2])
sapply(InsectSprays,class)
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
summary(fit)$coef
est <- summary(fit)$coef[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean
mean(sB)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,\"C\")
info()
info()
spray2 <- relevel(InsectSprays$spray,\"C\")
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray)
skip()
fit2
skip()
a
summary(fit2)$coef
sC
mean(sC)
aa
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
library(swirl)
swirl()
dim(hunger)
948
col(hunger)
name(hunger)
names(hunger)
names(hunger)
fit <- lm(hunger$Numeric ~ hunger$Year)
summary(fit)
summary(fit)$coef
summary(fit)$coef
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Male"],hunger)
lmF <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
summary(lmBOth)$coef
summary(lmBoth)$coef
summary(lmBoth)
summary(lmBoth)
lmInter <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex + hunger$Year * hunger$Sex)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
plot(fitno, which=1)
coef(fit)-coef(fitno)
View(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
sgma <- 1-resid(fit)[1]/resno
sigma <- sqrt(deviance(fit)/df.residual(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x2
simbias()
x1c <- simbias(
)
apply(x1c, 1, mean)
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
apply(fit1, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1)-deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
anova( n/d)
anova(d)
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d,2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
view(ravenData)
view(ravenData)
ravenData
glm()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl
)
confint(mdl)
exp(confint(mdl))
type anova(mdl)
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits']
)
hits[704,]
lamda <- mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
offset=log(visits+1)
qpois(.95, lambda)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
# Make a plot of the outcome (CompressiveStrength) versus the index of the samples.
# Color by each of the variables in the data set (you may find the cut2() function in the Hmisc package useful for turning continuous covariates into factors).
# What do you notice in these plots?
training$index <- seq(1, nrow(training))
require(reshape2)
D <- melt(training, id.var=c("index"))
ggplot(D, aes(x=index, y=value, color=variable)) +
geom_point(alpha=1/2) +
geom_smooth(alpha=1/2) +
facet_wrap(~ variable, nrow=3, scales="free_y") +
theme(legend.position="none")
ggplot(training, aes(x=Cement, y=CompressiveStrength)) +
geom_point(alpha=1/2) +
geom_smooth(alpha=1/2) +
geom_rug(alpha=1/4)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
# outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
install.packages(ElemStatLearn)
install.packages(ElemStatLearn)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
# outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
library(ElemStatLearn)
data(SAheart)
library(caret)
library(kernlab)
library(randomForest)
library(corrplot)
install.package(caret)
install.packages(caret)
install.packages(kernlab)
install.packages("caret")
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
# outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
library(ElemStatLearn)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
# outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(Caret)
library(caret)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
# outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
install.packages("randomForest")
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
install.packages("corrplot")
install.packages("kernlab")
